cd R
pwd
list.files("R")
andy <- read.csv(R/Andy.csv")")
andy <- read.csv("R/Andy.csv")
length(andy$Day)
dil(Day)
dim(andy)
str(andy)
summary(andy)
names(andy)
andy[1, "Weight""]
andy[1, "Weight"]
andy[1, "Weight"]
andy[1, "Weight"]
andy[30, "Weight"]
andy[which(andy$Day == 30), "Weight"]
subset(andy$Weight, andy$Day==30)
andy_start <- andy[1, "Weight"]
andy_end <- andy[30, "Weight"]
andy_loss <- andy_start - andy_end
andy_loss
files <- list.files("R")
files
fiels[1]4
files[1]
files[2]
files[2:5]
head(read.csv(files[3]))
head(read.csv(files[3]))
files_full <- list.files("R", full.names=TRUE)
files_full
head(read.csv(files_full[3]))
andy_david <- rbind(andy, read.csv(files_full[2]))
head(andy_david)
tail(andy_david)
day_25 <- andy_david[which(andy_david$Day == 25), ]
day_25
for (i in 1:5) {print(i)}
for (i in 1:5) {
dat <- rbind(dat, read.csv(files_full[i]))
}
dat <- data.frame()
for (i in 1:5) {
dat <- rbind(dat, read.csv(files_full[i]))
}
str(dat)
median(dat$Weight)
median(dat$Weight, na.rm=TRUE)
dat_30 <- dat[which(dat[, "Day"] == 30),]
dat_30
median(dat_30$Weight)
swirl()
library(swirl)
swirl()
library(dplyr)
cran <-tbl_df(mydf)
mydf
rm(mydf)
rm("mydf")
cran
?group_by()
info()
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package)
summarize(by_package,mean(size))
submit()
pack_sum <- summarize(by_package,
count = ,
unique = ,
countries = ,
avg_bytes = )
reset()
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
submit()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum,count > 679)
top_counts
View(top_counts)
top_counts-sorted <- arrange(count,desc(count))
top_counts-sorted <- arrange(top_counts,desc(count))
top_counts_sorted <- arrange(top_counts,desc(count))
Views(top_counts_sorted)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99).
quantile(pack_sum$unique,probs = 0.99).
quantile(pack_sum$unique,probs = 0.99)
top_unique <- filter(pack_sum,unique>465)
View(top_unique)
top_unique_sorted <- arrange(top_unique,desc(unique))
View(top_unique_sorted)
commit()
submit()
submit()
submit()
View(result3)
cran %>%
select() %>%
print
cran
cran %>%
select(ip_id,country,package,size) %>%
print cran
cran %>%
select(ip_id,country,package,size) %>%
print (cran)
cran %>%
select(ip_id,country,package,size) %>%
print (cran)%>%
cran %>%
select(ip_id,country,package,size) %>%
print (cran)
cran %>%
select(ip_id,country,package,size) %>%
print(cran)
print()
print cran
cran %>%
select(ip_id,country,package,size) %>%
print (cran)
submit()
commit()
submit()
cran %>%
select(ip_id, country, package, size) %>%
mutate(cran, size_mb = size/2^20)
print(cran)
cran %>%
select(ip_id, country, package, size) %>%
mutate(cran, size_mb = size/2^20) %>%
print(cran)
print (cran)
cran %>%
select(ip_id, country, package, size) %>%
print(cran)
mutate(cran, size_mb = size/2^20) %>%
print(cran)
submit()
submit()
submit()
mutate(size_mb = size / 2^20)
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2,sex_class,count)
res <- gather(students2,sex_class,count, -grade)
res
.seperate
?seperate
??seperate
?separate
separate(res, sex_class,c("sex", "class"))
submit()
submit()
submit()
submit()
students2 %>%
gather( students2,sex_class,count, -grade ) %>%
print (students2)
gather( students2,sex_class,count) %>%
print (students2)
submit()
reset()
submit()
students2
submit()
submit()
submit()
submit()
submit()
fit <- lm(y ~ x1 + x2 + x3)
---
title       :
subtitle    :
author      :
job         :
framework   : io2012        # {io2012, html5slides, shower, dzslides, ...}
highlighter : highlight.js  # {highlight.js, prettify, highlight}
hitheme     : tomorrow      #
widgets     : []            # {mathjax, quiz, bootstrap}
mode        : selfcontained # {standalone, draft}
knit        : slidify::knit2slides
---
## Read-And-Delete
1. Edit YAML front matter
2. Write using R Markdown
3. Use an empty line followed by three dashes to separate slides!
--- .class #id
## Slide 2
---
title       :
subtitle    :
author      :
job         :
framework   : io2012        # {io2012, html5slides, shower, dzslides, ...}
highlighter : highlight.js  # {highlight.js, prettify, highlight}
hitheme     : tomorrow      #
widgets     : []            # {mathjax, quiz, bootstrap}
mode        : selfcontained # {standalone, draft}
knit        : slidify::knit2slides
---
## Read-And-Delete
1. Edit YAML front matter
2. Write using R Markdown
3. Use an empty line followed by three dashes to separate slides!
--- .class #id
## Slide 2
library(devtools)
#install_github('ramnathv/slidify')
#install_github('ramnathv/slidifyLibraries')
library(slidify)
library(knitr)
##https://github.com/ramnathv/slidify
setwd ("C:/Users/gjf510/Google Drive/DataScience/Projects/Coursera/devdata")
author('IOTConsult')
slidify('index.Rmd')
# publish to github
# create an empty repo on github. replace USER and REPO with your repo details
##https://github.com/IOTConsult/devdata.git
#publish(user = kestens.serge@gmail.com, repo = devdata)
1+2
M1 <- gvisMotionChart(TotalRevenue, idvar = 'Month', timevar = 'Year')
str(M1)
demo(googleVis)
require(googleVis)
demo(googleVis)
